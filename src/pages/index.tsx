import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useReducer, useState } from 'react'
import '../styles/Home.module.css';
import { ToDoContext, ToDoDispatchContext } from '@/components/ToDoContext';
import ListComponent from '@/components/ListComponent';

const inter = Inter({ subsets: ['latin'] })

export type toDo = {
  id?: number,
  name?: string,
}

export type ACTIONTYPE = 
| {type: 'ADD', payload: toDo} 
| {type: 'DELETE', payload: toDo} 
| {type: 'INPROGRESS', payload: toDo}
| {type: 'COMPLETED', payload: toDo};

export type State = {
  counter: number,
  toDoList: toDo[],
  inProgress: toDo[],
  completed: toDo[]
}

const initialState: State = {
  counter: 0,
  toDoList: [],
  inProgress: [],
  completed: []
}

// function that returns a new array that doesn't include the "deleted" item
function filterTaskById(toDos: toDo[], id: number) {
  return toDos.filter( task => task['id'] !== id)
}

function myReducer(state: State, action: ACTIONTYPE): State {
  switch (action.type) {
    case 'ADD': {
      // provides a unique idea to each todo for later use. ie filter the arrays to delete todo
      const newCounter = state.counter ++;
      const newToDo = {
        id: newCounter,
        name: action.payload.name,
      }
      return {
        ...state,
        toDoList: [...state.toDoList, newToDo]
      }
    };
    case 'DELETE': {
      const deleteID = action.payload.id;
      // checks toDoList array if current todo is in the array before deleteing if not returns unchanged array
      const updatedToDoList = state.toDoList.some( t => t.id === deleteID )
      ? filterTaskById(state.toDoList, deleteID!)
      : state.toDoList;

      // checks toDoList array if current todo is in the array before deleteing if not returns unchanged array
      const updatedInProgressList = state.inProgress.some( t => t.id === deleteID)
      ? filterTaskById(state.inProgress, deleteID!)
      : state.inProgress;

      // checks toDoList array if current todo is in the array before deleteing if not returns unchanged array
      const updatedCompletedList = state.completed.some( t => t.id === deleteID)
      ? filterTaskById(state.completed, deleteID!)
      : state.completed;

      return {
        ...state,
        toDoList: updatedToDoList,
        inProgress: updatedInProgressList,
        completed: updatedCompletedList
      }
    };
    case 'INPROGRESS': {
      const newToDo = {
        id: action.payload.id,
        name: action.payload.name
      }
      return {
        ...state,
        inProgress: [...state.inProgress, newToDo],
        toDoList: filterTaskById(state.toDoList, action.payload.id!)
      }
    };
    case 'COMPLETED': {
      const newToDo = {
        id: action.payload.id,
        name: action.payload.name
      }
      return {
        ...state,
        completed: [...state.completed, newToDo],
        inProgress: filterTaskById(state.inProgress, action.payload.id!)
      }
    }
    default:
      throw new Error('wrong action');
  }
}

export default function Home() {
  const [text, setText] = useState<string>('');
  const [state, dispatch] = useReducer(myReducer, initialState);
  
  function handleAdd(text: string) {
    dispatch({type: 'ADD', payload: {name: text}})
  }

  return (
    <ToDoContext.Provider value={state}>
      <ToDoDispatchContext.Provider value={dispatch}>
      <>
        <Head>
          <title>To Do List</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
          <div>
            <h1>To Do App</h1>
              <section>
                <input 
                type="text"
                value={text}
                onChange={e => setText(e.target.value)}
                placeholder='To Do'
                />
                <button className='btn' onClick={ ()=> {handleAdd(text), setText('')}}>
                  Submit
                </button>
              </section>
            <ListComponent />
          </div>
        </main>
      </>
      </ToDoDispatchContext.Provider>
    </ToDoContext.Provider>
  )
}
