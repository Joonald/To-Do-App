import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useReducer, useState } from 'react'
import '../styles/Home.module.css';

const inter = Inter({ subsets: ['latin'] })

type toDo = {
  id?: number,
  name?: string,
}

type ACTIONTYPE = 
| {type: 'ADD', payload: toDo} 
| {type: 'DELETE', payload: toDo} 
| {type: 'INPROGRESS', payload: toDo}
| {type: 'COMPLETED', payload: toDo};

type State = {
  counter: number,
  toDoList: toDo[],
  inProgress: toDo[],
  completed: toDo[]
}

const initialState: State = {
  counter: 0,
  toDoList: [],
  inProgress: [],
  completed: []
}

// function that returns a new array that doesn't include the "deleted" item
function filterTaskById(toDos: toDo[], id: number) {
  return toDos.filter( task => task['id'] !== id)
}

function myReducer(state: State, action: ACTIONTYPE): State {
  switch (action.type) {
    case 'ADD': {
      const newCounter = state.counter ++;
      const newToDo = {
        id: newCounter,
        name: action.payload.name,
      }
      return {
        ...state,
        toDoList: [...state.toDoList, newToDo]
      }
    };
    case 'DELETE': {
      const deleteID = action.payload.id;
      // checks toDoList array if current todo is in the array before deleteing if not returns unchanged array
      const updatedToDoList = state.toDoList.some( t => t.id === deleteID )
      ? filterTaskById(state.toDoList, deleteID!)
      : state.toDoList;

      // checks toDoList array if current todo is in the array before deleteing if not returns unchanged array
      const updatedInProgressList = state.inProgress.some( t => t.id === deleteID)
      ? filterTaskById(state.inProgress, deleteID!)
      : state.inProgress;

      // checks toDoList array if current todo is in the array before deleteing if not returns unchanged array
      const updatedCompletedList = state.completed.some( t => t.id === deleteID)
      ? filterTaskById(state.completed, deleteID!)
      : state.completed;

      return {
        ...state,
        toDoList: updatedToDoList,
        inProgress: updatedInProgressList,
        completed: updatedCompletedList
      }
    };
    case 'INPROGRESS': {
      const newToDo = {
        id: action.payload.id,
        name: action.payload.name
      }
      return {
        ...state,
        inProgress: [...state.inProgress, newToDo],
        toDoList: filterTaskById(state.toDoList, action.payload.id!)
      }
    };
    case 'COMPLETED': {
      const newToDo = {
        id: action.payload.id,
        name: action.payload.name
      }
      return {
        ...state,
        completed: [...state.completed, newToDo],
        inProgress: filterTaskById(state.inProgress, action.payload.id!)
      }
    }
    default:
      throw new Error('wrong action');
  }
}

export default function Home() {
  const [text, setText] = useState<string>('');
  const [state, dispatch] = useReducer(myReducer, initialState);
  
  function handleAdd(text: string) {
    dispatch({type: 'ADD', payload: {name: text}})
  }
  
  function handleDelete(id: number) {
    dispatch({type:'DELETE', payload: {id:id}})
  }

  function handleInProgress(id: number, name: string) {
    dispatch({type: 'INPROGRESS', payload: {id: id, name: name}})
  }

  function handleCompleted(id: number, name: string) {
    dispatch({type: 'COMPLETED', payload: {id: id, name: name}})
  }

  return (
    <>
      <Head>
        <title>To Do List</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <h1>To Do App</h1>
            <section>
              <input 
              type="text"
              value={text}
              onChange={e => setText(e.target.value)}
              placeholder='To Do'
              />
              <button className='btn' onClick={ ()=> {handleAdd(text), setText('')}}>
                Submit
              </button>
            </section>
          <section className='todo-list-screen'>
            <section>
              <h2>To Do List</h2>
              {state.toDoList.length > 0
              ?
                <ul>
                {state.toDoList.map((task: toDo)=> {
                  return (
                    <> 
                        <li key={task.id}>{task.name}</li>
                        <button className='btn' onClick={ () => 
                        handleDelete(task.id!)
                        }>
                        Delete
                        </button>
                        <button className='btn' onClick={ () => 
                          handleInProgress(task.id!, task.name!)}>
                        Move To In Progress
                        </button>
                    </>
                  )
                })}
                </ul>
              :
                <p>To Do List is Empty</p>
            }
            </section>
            <section>
              <h2>In Progress List</h2>
              {state.inProgress.length > 0
              ?
                <ul>
                {state.inProgress.map((task: toDo)=> {
                  return (
                    <> 
                        <li key={task.id}>{task.name}</li>
                        <button className='btn' onClick={ () => 
                        handleDelete(task.id!)
                        }>
                        Delete
                        </button>
                        <button className='btn' onClick={ () => 
                          handleCompleted(task.id!, task.name!)}>
                        Complete Task
                        </button>
                    </>
                  )
                })}
                </ul>
              :
                <p>In Progress List is Empty</p>
            }
            </section>
            <section>
              <h2>Completed</h2>
              {state.completed.length > 0
              ?
                <ul>
                {state.completed.map((task: toDo)=> {
                  return (
                    <> 
                        <li key={task.id}>{task.name}</li>
                        <button className='btn' onClick={ () => 
                        handleDelete(task.id!)
                        }>
                        Delete
                        </button>
                    </>
                  )
                })}
                </ul>
              :
                <p>Completed List is Empty</p>
            }
            </section>
          </section>
        </div>
      </main>
    </>
  )
}
